apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.24.0 (7c629530)
      creationTimestamp: null
      labels:
        io.kompose.service: api-gateway
      name: api-gateway
    spec:
      type: LoadBalancer
      ports:
        - name: "8081"
          port: 8081
          targetPort: 8081
      selector:
        io.kompose.service: api-gateway
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.24.0 (7c629530)
      creationTimestamp: null
      labels:
        io.kompose.service: db-mysql
      name: db-mysql
    spec:
      ports:
        - name: "3306"
          port: 3306
          targetPort: 3306
      selector:
        io.kompose.service: db-mysql
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.24.0 (7c629530)
      creationTimestamp: null
      labels:
        io.kompose.service: imgur-service
      name: imgur-service
    spec:
      ports:
        - name: "8091"
          port: 8091
          targetPort: 8091
      selector:
        io.kompose.service: imgur-service
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.24.0 (7c629530)
      creationTimestamp: null
      labels:
        io.kompose.service: api-gateway
      name: api-gateway
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api-gateway
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
            kompose.version: 1.24.0 (7c629530)
          creationTimestamp: null
          labels:
            io.kompose.service: api-gateway
        spec:
          containers:
            - image: api-gateway:latest
              imagePullPolicy: Never 
              name: api-gateway
              ports:
                - containerPort: 8081
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.24.0 (7c629530)
      creationTimestamp: null
      labels:
        io.kompose.service: db-mysql
      name: db-mysql
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: db-mysql
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
            kompose.version: 1.24.0 (7c629530)
          creationTimestamp: null
          labels:
            io.kompose.service: db-mysql
        spec:
          containers:
            - env:
                - name: MYSQL_DATABASE
                  value: imgurdb
                - name: MYSQL_PASSWORD
                  value: e63sAMGsedan
                - name: MYSQL_ROOT_PASSWORD
                  value: e63sAMGsedan
                - name: MYSQL_USER
                  value: mysql
              image: mysql:latest
              name: db-mysql
              ports:
                - containerPort: 3306
              resources: {}
              securityContext:
                capabilities:
                  add:
                    - SYS_NICE
              volumeMounts:
                - mountPath: /var/lib/mysql
                  name: db-imgur
          restartPolicy: Always
          volumes:
            - name: db-imgur
              persistentVolumeClaim:
                claimName: db-imgur
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: db-imgur
      name: db-imgur
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
        kompose.version: 1.24.0 (7c629530)
      creationTimestamp: null
      labels:
        io.kompose.service: imgur-service
      name: imgur-service
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: imgur-service
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml -o kubemanifest.yaml
            kompose.version: 1.24.0 (7c629530)
          creationTimestamp: null
          labels:
            io.kompose.service: imgur-service
        spec:
          containers:
            - image: imgur-service:latest
              imagePullPolicy: Never 
              name: imgur-service
              ports:
                - containerPort: 8091
              resources: {}
              volumeMounts:
                - mountPath: /src/main/TemporaryFiles/
                  name: temporary-files
          restartPolicy: Always
          volumes:
            - name: temporary-files
              persistentVolumeClaim:
                claimName: temporary-files
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: temporary-files
      name: temporary-files
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
kind: List
metadata: {}

